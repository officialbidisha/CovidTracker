{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.component.ts","webpack:///src/app/app.module.ts","webpack:///src/app/cases-summary/cases-summary.component.html","webpack:///src/app/cases-summary/cases-summary.component.ts","webpack:///src/app/home/home.component.html","webpack:///src/app/home/home.component.ts","webpack:///src/app/httpcalls.service.ts","webpack:///src/app/search/search.component.html","webpack:///src/app/search/search.component.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","component","AppRoutingModule","AppComponent","title","AppModule","CasesSummaryComponent","httpcall","loaded","country","totalConfirmed","totalDeaths","totalRecovered","displayedColumns","dtSource","dataSource","paginator","sort","matSort","getbyCountries","subscribe","result","Countries","eachRes","push","Country","TotalConfirmed","TotalRecovered","TotalDeaths","i","length","obj","position","confirmed","recovered","deaths","value","HomeComponent","view","legend","showLabels","animations","xAxis","yAxis","showYAxisLabel","showXAxisLabel","xAxisLabel","yAxisLabel","timeline","gradient","showGridLines","roundDomains","colorScheme","domain","top1","top2","top3","yAxisTickFormattingFn","yAxisTickFormatting","bind","xAxisTickFormattingFn","xAxisTickFormatting","countries","first","second","third","index1","index2","index3","globalresult","getChartData","totalCasesArray","temp","name","Date","Confirmed","totalCasesObject","series","totalDeathsArray","Deaths","totalDeathsObject","totalRecoveredArray","Recovered","totalRecoveredObject","chartInfo","getChartDataByCountries","Slug","multi1","getChartObjectData","multi2","multi3","HttpcallsService","https","headerDict","Accept","requestOptions","headers","get","slug","SearchComponent","formBuilder","httpcallsService","countryForm","options","getCountries","res","filteredOptions","controls","valueChanges","pipe","_filter","filterValue","toLowerCase","filter","option","includes","formValues","flagSearch","response","countryData","nullstring","globalResultSearch","multi","environment","production","err","console","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { CasesSummaryComponent } from './cases-summary/cases-summary.component';\r\nimport { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { HomeComponent } from './home/home.component';\r\nimport { SearchComponent } from './search/search.component';\r\n\r\n\r\nconst routes: Routes = [\r\n  {path: '', component: HomeComponent},\r\n  {path: 'search', component: SearchComponent},\r\n  {path: 'cases-summary', component: CasesSummaryComponent}\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","<div class=\"container\">\r\n  <div class=\"heading\" style=\"text-align:center\">\r\n\r\n    <a routerLink=\"/\" routerLinkActive=\"active\"><h2 style=\"display:inline-block\" class=\"display-2\">Covid Tracker &nbsp;&nbsp;&nbsp;</h2></a>\r\n    <a routerLink=\"/search\" routerLinkActive=\"active\"><span class=\"material-icons\" style=\"font-size: 40px;\">\r\n      search\r\n      </span></a>\r\n      <a class=\"table-icon\" routerLink=\"/cases-summary\"  matTooltip=\"Summary\"><span class=\"material-icons\">\r\n        table_view\r\n        </span></a>\r\n     <div class=\"p-2\"></div>\r\n     <marquee behavior=\"scroll\" direction=\"left\" scrolldelay=\"3s\" width=\"60%\">Clean your hands often. Use soap and water, or an alcohol-based hand rub.\r\n      &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp;&nbsp;&nbsp; &nbsp; &nbsp;\r\n      Maintain a safe distance from anyone who is coughing or sneezing.\r\n      &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp;&nbsp;&nbsp; &nbsp; &nbsp;\r\n      Wear a mask when physical distancing is not possible.\r\n      &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp;&nbsp;&nbsp; &nbsp; &nbsp;\r\n      Don’t touch your eyes, nose or mouth.\r\n      &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp;&nbsp;&nbsp; &nbsp; &nbsp;\r\n      Cover your nose and mouth with your bent elbow or a tissue when you cough or sneeze.\r\n      &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp;&nbsp;&nbsp; &nbsp; &nbsp;\r\n      Stay home if you feel unwell.\r\n      &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp;&nbsp;&nbsp; &nbsp; &nbsp;\r\n      If you have a fever, cough and difficulty breathing, seek medical attention.\r\n      &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; \r\n  \r\n  </marquee>\r\n  </div>\r\n</div>\r\n\r\n<div class=\"container\">\r\n<router-outlet></router-outlet>\r\n</div>\r\n","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponent {\r\n  title = 'CovidTracker';\r\n}\r\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { HomeComponent } from './home/home.component';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { NgxChartsModule } from '@swimlane/ngx-charts';\r\nimport {MatAutocompleteModule} from '@angular/material/autocomplete'\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport {ReactiveFormsModule} from '@angular/forms';\r\nimport { SearchComponent } from './search/search.component';\r\nimport {MatInputModule} from '@angular/material/input';\r\nimport {MatButtonModule} from '@angular/material/button';\r\nimport { HttpcallsService } from './httpcalls.service';\r\nimport {MatIconModule} from '@angular/material/icon';\r\nimport {MatDialogModule} from '@angular/material/dialog';\r\nimport {MatProgressSpinnerModule} from '@angular/material/progress-spinner';\r\nimport { CasesSummaryComponent } from './cases-summary/cases-summary.component';\r\nimport {MatTableModule} from '@angular/material/table';\r\nimport {MatPaginatorModule} from '@angular/material/paginator';\r\nimport {MatSortModule} from '@angular/material/sort';\r\nimport {MatTooltipModule} from '@angular/material/tooltip';\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    HomeComponent,\r\n    SearchComponent,\r\n    CasesSummaryComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    HttpClientModule,\r\n    NgxChartsModule,\r\n    BrowserAnimationsModule,\r\n    MatAutocompleteModule,\r\n    MatFormFieldModule,\r\n    ReactiveFormsModule,\r\n    MatInputModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatProgressSpinnerModule,\r\n    MatDialogModule,\r\n    MatTableModule,\r\n    MatPaginatorModule,\r\n    MatSortModule,\r\n    MatTooltipModule\r\n  ],\r\n  providers: [HttpcallsService],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","<div *ngIf=\"loaded\" class=\"summary-table\">\r\n  <div class=\"mat-elevation-z8\">\r\n    <table mat-table [dataSource]=\"dataSource\" matSort>\r\n      <!-- Position Column -->\r\n      <ng-container matColumnDef=\"position\">\r\n        <th mat-header-cell *matHeaderCellDef>No.</th>\r\n        <td mat-cell *matCellDef=\"let element\">{{ element.position }}</td>\r\n      </ng-container>\r\n\r\n      <!-- Name Column -->\r\n      <ng-container matColumnDef=\"country\">\r\n        <th mat-header-cell *matHeaderCellDef>Country</th>\r\n        <td mat-cell *matCellDef=\"let element\">{{ element.country }}</td>\r\n      </ng-container>\r\n\r\n      <!-- Weight Column -->\r\n      <ng-container matColumnDef=\"confirmed\">\r\n        <th mat-header-cell *matHeaderCellDef mat-sort-header>Confirmed</th>\r\n        <td mat-cell *matCellDef=\"let element\">{{ element.confirmed }}</td>\r\n      </ng-container>\r\n\r\n      <!-- Symbol Column -->\r\n      <ng-container matColumnDef=\"recovered\">\r\n        <th mat-header-cell *matHeaderCellDef mat-sort-header>Recovered</th>\r\n        <td mat-cell *matCellDef=\"let element\">{{ element.recovered }}</td>\r\n      </ng-container>\r\n\r\n      <ng-container matColumnDef=\"deaths\">\r\n        <th mat-header-cell *matHeaderCellDef mat-sort-header>Deaths</th>\r\n        <td mat-cell *matCellDef=\"let element\">{{ element.deaths }}</td>\r\n      </ng-container>\r\n\r\n      <tr mat-header-row *matHeaderRowDef=\"displayedColumns; sticky: true\"></tr>\r\n      <tr mat-row *matRowDef=\"let row; columns: displayedColumns\"></tr>\r\n    </table>\r\n\r\n    <mat-paginator\r\n      [pageSizeOptions]=\"[\r\n        5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150,\r\n        160, 170, 180, 190, 200\r\n      ]\"\r\n      showFirstLastButtons\r\n      aria-label=\"Select page of periodic elements\"\r\n    >\r\n    </mat-paginator>\r\n  </div>\r\n</div>\r\n<div class=\"spin\" *ngIf=\"!loaded\">\r\n  <mat-spinner></mat-spinner>\r\n</div>\r\n","import {\r\n  AfterViewInit,\r\n  Component,\r\n  OnInit,\r\n  ViewChild,\r\n} from \"@angular/core\";\r\nimport { MatPaginator } from \"@angular/material/paginator\";\r\nimport { MatTableDataSource } from \"@angular/material/table\";\r\nimport { HttpcallsService } from \"../httpcalls.service\";\r\nimport { MatSort } from \"@angular/material/sort\";\r\n\r\n@Component({\r\n  selector: \"app-cases-summary\",\r\n  templateUrl: \"./cases-summary.component.html\",\r\n  styleUrls: [\"./cases-summary.component.scss\"],\r\n})\r\nexport class CasesSummaryComponent implements OnInit, AfterViewInit {\r\n  public loaded = false;\r\n  public country: string[] = [];\r\n  public totalConfirmed: number[] = [];\r\n  public totalDeaths: number[] = [];\r\n  public totalRecovered: number[] = [];\r\n  public displayedColumns: string[] = [\r\n    \"position\",\r\n    \"country\",\r\n    \"confirmed\",\r\n    \"recovered\",\r\n    \"deaths\",\r\n  ];\r\n  public dtSource = [];\r\n  public dataSource = new MatTableDataSource<PeriodicElement>(this.dtSource);\r\n\r\n  @ViewChild(MatPaginator, { static: false })\r\n  set paginator(value: MatPaginator) {\r\n    this.dataSource.paginator = value;\r\n  }\r\n\r\n  @ViewChild(MatSort, { static: false })\r\n  set matSort(value: MatSort) {\r\n    this.dataSource.sort = value;\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this.dataSource.paginator = this.paginator;\r\n    this.dataSource.sort = this.matSort;\r\n  }\r\n\r\n  constructor(private httpcall: HttpcallsService) {}\r\n\r\n  ngOnInit(): void {\r\n    this.httpcall.getbyCountries().subscribe((result: any) => {\r\n      for (let eachRes of result.Countries) {\r\n        this.country.push(eachRes.Country);\r\n        this.totalConfirmed.push(eachRes.TotalConfirmed);\r\n        this.totalRecovered.push(eachRes.TotalRecovered);\r\n        this.totalDeaths.push(eachRes.TotalDeaths);\r\n      }\r\n      for (let i = 0; i < this.country.length; i++) {\r\n        const obj = {\r\n          position: i + 1,\r\n          country: this.country[i],\r\n          confirmed: this.totalConfirmed[i],\r\n          recovered: this.totalConfirmed[i] - this.totalDeaths[i],\r\n          deaths: this.totalDeaths[i],\r\n        };\r\n        this.dtSource.push(obj);\r\n      }\r\n      if (this.dtSource.length === this.country.length) {\r\n        this.dataSource = new MatTableDataSource<any>(this.dtSource);\r\n        this.dataSource.paginator = this.paginator;\r\n        this.loaded = true;\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport interface PeriodicElement {\r\n  country: string;\r\n  position: number;\r\n  confirmed: number;\r\n  recovered: number;\r\n  deaths: number;\r\n}\r\n","<div class=\"contains\" *ngIf=\"globalresult\">\r\n  <div class=\"row\">\r\n    <div class=\"col-md-4\">\r\n      <div class=\"box\">\r\n        <div>\r\n          <span class=\"badge badge-light\">1st</span>\r\n          <div class=\"p-2\"></div>\r\n          <div class=\"item\">\r\n            <div class=\"item-name\">Country Name:</div>\r\n            <div class=\"item-content\">\r\n              {{\r\n                globalresult.Countries[top1].Country.length > 11\r\n                  ? globalresult.Countries[top1].CountryCode\r\n                  : globalresult.Countries[top1].Country\r\n              }}\r\n            </div>\r\n          </div>\r\n          <div class=\"item\">\r\n            <div class=\"item-name\">Date:</div>\r\n            <div class=\"item-content\">\r\n              {{ globalresult.Countries[top1].Date | date: \"MMM d, y\" }}\r\n            </div>\r\n          </div>\r\n          <div class=\"item\">\r\n            <div class=\"item-name\">Number of Infected:</div>\r\n            <div class=\"item-content\">\r\n              {{ globalresult.Countries[top1].TotalConfirmed }}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <!--name card ends-->\r\n    </div>\r\n    <div class=\"col-md-8\">\r\n      <div class=\"box\">\r\n        <div class=\"chart-box\">\r\n          <ngx-charts-line-chart\r\n            [scheme]=\"colorScheme\"\r\n            [legend]=\"legend\"\r\n            [showXAxisLabel]=\"showXAxisLabel\"\r\n            [showYAxisLabel]=\"showYAxisLabel\"\r\n            [xAxis]=\"xAxis\"\r\n            [yAxis]=\"yAxis\"\r\n            [xAxisLabel]=\"xAxisLabel\"\r\n            [yAxisLabel]=\"yAxisLabel\"\r\n            [timeline]=\"timeline\"\r\n            [results]=\"multi1\"\r\n            [gradient]=\"gradient\"\r\n            [showGridLines]=\"true\"\r\n            [roundDomains]=\"true\"\r\n          >\r\n          </ngx-charts-line-chart>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"col-md-4\">\r\n      <div class=\"box\">\r\n        <div>\r\n          <span class=\"badge badge-light\">2nd</span>\r\n          <div class=\"p-2\"></div>\r\n          <div class=\"item\">\r\n            <div class=\"item-name\">Country Name:</div>\r\n            <div class=\"item-content\">\r\n              {{\r\n                globalresult.Countries[top2].Country.length > 11\r\n                  ? globalresult.Countries[top2].CountryCode\r\n                  : globalresult.Countries[top2].Country\r\n              }}\r\n            </div>\r\n          </div>\r\n          <div class=\"item\">\r\n            <div class=\"item-name\">Date:</div>\r\n            <div class=\"item-content\">\r\n              {{ globalresult.Countries[top2].Date | date: \"MMM d, y\" }}\r\n            </div>\r\n          </div>\r\n          <div class=\"item\">\r\n            <div class=\"item-name\">Number of Infected:</div>\r\n            <div class=\"item-content\">\r\n              {{ globalresult.Countries[top2].TotalConfirmed }}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <!--name card ends-->\r\n    </div>\r\n    <div class=\"col-md-8\">\r\n      <div class=\"box\">\r\n        <div class=\"chart-box\">\r\n          <ngx-charts-line-chart\r\n            [scheme]=\"colorScheme\"\r\n            [legend]=\"legend\"\r\n            [showXAxisLabel]=\"showXAxisLabel\"\r\n            [showYAxisLabel]=\"showYAxisLabel\"\r\n            [xAxis]=\"xAxis\"\r\n            [yAxis]=\"yAxis\"\r\n            [xAxisLabel]=\"xAxisLabel\"\r\n            [yAxisLabel]=\"yAxisLabel\"\r\n            [timeline]=\"timeline\"\r\n            [results]=\"multi2\"\r\n            [gradient]=\"gradient\"\r\n            [showGridLines]=\"true\"\r\n            [roundDomains]=\"true\"\r\n          >\r\n          </ngx-charts-line-chart>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"col-md-4\">\r\n      <div class=\"box\">\r\n        <div>\r\n          <span class=\"badge badge-light\">3rd</span>\r\n          <div class=\"p-2\"></div>\r\n          <div class=\"item\">\r\n            <div class=\"item-name\">Country Name:</div>\r\n            <div class=\"item-content\">\r\n              {{\r\n                globalresult.Countries[top3].Country.length > 11\r\n                  ? globalresult.Countries[top3].CountryCode\r\n                  : globalresult.Countries[top3].Country\r\n              }}\r\n            </div>\r\n          </div>\r\n          <div class=\"item\">\r\n            <div class=\"item-name\">Date:</div>\r\n            <div class=\"item-content\">\r\n              {{ globalresult.Countries[top3].Date | date: \"MMM d, y\" }}\r\n            </div>\r\n          </div>\r\n          <div class=\"item\">\r\n            <div class=\"item-name\">Number of Infected:</div>\r\n            <div class=\"item-content\">\r\n              {{ globalresult.Countries[top3].TotalConfirmed }}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <!--name card ends-->\r\n    </div>\r\n    <div class=\"col-md-8\">\r\n      <div class=\"box\">\r\n        <div class=\"chart-box\">\r\n          <ngx-charts-line-chart\r\n            [scheme]=\"colorScheme\"\r\n            [legend]=\"legend\"\r\n            [showXAxisLabel]=\"showXAxisLabel\"\r\n            [showYAxisLabel]=\"showYAxisLabel\"\r\n            [xAxis]=\"xAxis\"\r\n            [yAxis]=\"yAxis\"\r\n            [xAxisLabel]=\"xAxisLabel\"\r\n            [yAxisLabel]=\"yAxisLabel\"\r\n            [timeline]=\"timeline\"\r\n            [results]=\"multi3\"\r\n            [gradient]=\"gradient\"\r\n            [showGridLines]=\"true\"\r\n            [roundDomains]=\"true\"\r\n          >\r\n          </ngx-charts-line-chart>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n<!---contains ended-->\r\n<div *ngIf=\"!globalresult\" class=\"spin\">\r\n  <div class=\"fluid\">\r\n    <mat-spinner></mat-spinner>\r\n  </div>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { HttpcallsService } from '../httpcalls.service';\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  templateUrl: './home.component.html',\r\n  styleUrls: ['./home.component.scss'],\r\n})\r\nexport class HomeComponent implements OnInit {\r\n  public view: any[] = [600, 300];\r\n\r\n  /**\r\n   * Options\r\n   */\r\n  public legend = true;\r\n  public showLabels = true;\r\n  public animations = true;\r\n  public xAxis = true;\r\n  public yAxis = true;\r\n  public showYAxisLabel = false;\r\n  public showXAxisLabel = false;\r\n  public xAxisLabel = 'Number of Days';\r\n  public yAxisLabel = 'Cases';\r\n  public timeline = false;\r\n  public gradient = true;\r\n  public showGridLines = true;\r\n  public roundDomains = true;\r\n  public colorScheme = {\r\n    domain: ['#1f8ef1', '#FF1493', '#00f2c3', '#ec250d'],\r\n  };\r\n  public top1 = 0;\r\n  public top2 = 0;\r\n  public top3 = 0;\r\n  public globalresult;\r\n\r\n  public multi1: any;\r\n  public multi2: any;\r\n  public multi3: any;\r\n\r\n  public yAxisTickFormattingFn = this.yAxisTickFormatting.bind(this);\r\n  public xAxisTickFormattingFn = this.xAxisTickFormatting.bind(this);\r\n\r\n  constructor(private httpcall: HttpcallsService) {}\r\n\r\n  ngOnInit(): void {\r\n    this.httpcall.getbyCountries().subscribe((result: any) => {\r\n      const countries = result.Countries;\r\n      let first = 0;\r\n      let second = 0;\r\n      let third = 0;\r\n      let index1 = -1;\r\n      let index2 = -1;\r\n      let index3 = -1;\r\n      for (let i = 0; i < countries.length; i++) {\r\n        if (countries[i].TotalConfirmed >= first) {\r\n          third = second;\r\n          index3 = index2;\r\n          second = first;\r\n          index2 = index1;\r\n          first = countries[i].TotalConfirmed;\r\n          index1 = i;\r\n        } else if (countries[i].TotalConfirmed >= second) {\r\n          third = second;\r\n          index3 = index2;\r\n          second = countries[i].TotalConfirmed;\r\n          index2 = i;\r\n        } else if (countries[i].TotalConfirmed >= third) {\r\n          third = countries[i].TotalConfirmed;\r\n          index3 = i;\r\n        }\r\n      }\r\n      this.top1 = index1;\r\n      this.top2 = index2;\r\n      this.top3 = index3;\r\n      this.globalresult = result;\r\n      this.getChartData();\r\n    });\r\n  }\r\n\r\n  public getChartObjectData(result: any) {\r\n    const totalCasesArray = [];\r\n    for (const i of result) {\r\n      const temp = {\r\n        name: new Date(i.Date),\r\n        value: i.Confirmed,\r\n      };\r\n      totalCasesArray.push(temp);\r\n    }\r\n    const totalCasesObject = {\r\n      name: 'Confirmed',\r\n      series: totalCasesArray,\r\n    };\r\n    const totalDeathsArray = [];\r\n    for (const i of result) {\r\n      const temp = {\r\n        name: new Date(i.Date),\r\n        value: i.Deaths,\r\n      };\r\n      totalDeathsArray.push(temp);\r\n    }\r\n    const totalDeathsObject = {\r\n      name: 'Death',\r\n      series: totalDeathsArray,\r\n    };\r\n    const totalRecoveredArray = [];\r\n    for (const i of  result) {\r\n      const temp = {\r\n        name: new Date(i.Date),\r\n        value: i.Recovered,\r\n      };\r\n      totalRecoveredArray.push(temp);\r\n    }\r\n    const totalRecoveredObject = {\r\n      name: 'Recovery',\r\n      series: totalRecoveredArray,\r\n    };\r\n    const chartInfo = [];\r\n    chartInfo.push(totalCasesObject);\r\n    chartInfo.push(totalDeathsObject);\r\n    chartInfo.push(totalRecoveredObject);\r\n    return chartInfo;\r\n  }\r\n\r\n  public getChartData() {\r\n    this.httpcall\r\n      .getChartDataByCountries(this.globalresult.Countries[this.top1].Slug)\r\n      .subscribe((result: any) => {\r\n        this.multi1 = this.getChartObjectData(result);\r\n      });\r\n    this.httpcall\r\n      .getChartDataByCountries(this.globalresult.Countries[this.top2].Slug)\r\n      .subscribe((result: any) => {\r\n        this.multi2 = this.getChartObjectData(result);\r\n      });\r\n    this.httpcall\r\n      .getChartDataByCountries(this.globalresult.Countries[this.top3].Slug)\r\n      .subscribe((result: any) => {\r\n        this.multi3 = this.getChartObjectData(result);\r\n      });\r\n  }\r\n\r\n  yAxisTickFormatting(value) {\r\n    return '';\r\n  }\r\n  xAxisTickFormatting(value) {\r\n    return '';\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class HttpcallsService {\r\n\r\n  public headerDict = {\r\n    'Content-Type': 'application/json',\r\n    Accept: 'application/json',\r\n    'Access-Control-Allow-Headers': 'Content-Type',\r\n  };\r\n\r\n  public requestOptions = {\r\n    headers: new HttpHeaders(this.headerDict),\r\n  };\r\n  constructor(private https: HttpClient) {}\r\n\r\n  getCountries(): Observable<any> {\r\n    return this.https.get('https://api.covid19api.com/countries', this.requestOptions);\r\n  }\r\n  getbyCountries(): Observable<any> {\r\n    return this.https.get('https://api.covid19api.com/summary', this.requestOptions);\r\n  }\r\n  getChartDataByCountries(slug: any): Observable<any> {\r\n    return this.https.get('https://api.covid19api.com/total/country/' + slug, this.requestOptions);\r\n  }\r\n  getCountrySpecific(country): Observable<any> {\r\n    return this.https.get(\r\n      'https://api.covid19api.com/country/' + country + '/status/confirmed', this.requestOptions\r\n    );\r\n  }\r\n}\r\n","<form\r\n  class=\"example-form\"\r\n  [formGroup]=\"countryForm\"\r\n  (ngSubmit)=\"onSubmit(countryForm.value.country)\"\r\n>\r\n  <div class=\"row\" style=\"margin: auto\">\r\n    <div class=\"col-md-8\">\r\n      <mat-form-field hideRequiredMarker class=\"example-full-width\">\r\n        <div class=\"form-group\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Country\"\r\n            aria-label=\"Number\"\r\n            matInput\r\n            formControlName=\"country\"\r\n            [matAutocomplete]=\"auto\"\r\n            required\r\n          />\r\n        </div>\r\n        <mat-autocomplete #auto=\"matAutocomplete\">\r\n          <mat-option *ngFor=\"let option of options\" [value]=\"option\">\r\n            {{ option }}\r\n          </mat-option>\r\n        </mat-autocomplete>\r\n      </mat-form-field>\r\n    </div>\r\n    <div class=\"col-md-4\">\r\n      <button mat-raised-button color=\"accent\" type=\"submit\">Submit</button>\r\n    </div>\r\n  </div>\r\n</form>\r\n<div class=\"p-3\"></div>\r\n<div class=\"contains\" *ngIf=\"globalResultSearch\">\r\n  <div class=\"row\">\r\n    <div class=\"col-md-4\">\r\n      <div class=\"box\">\r\n        <div>\r\n          <div class=\"item\">\r\n            <div class=\"item-name\">Country Name:</div>\r\n            <div class=\"item-content\">\r\n              {{ globalResultSearch.Country }}\r\n            </div>\r\n          </div>\r\n          <div class=\"item\">\r\n            <div class=\"item-name\">Date:</div>\r\n            <div class=\"item-content\">\r\n              {{ globalResultSearch.Date | date: \"MMM d, y\" }}\r\n            </div>\r\n          </div>\r\n          <div class=\"item\">\r\n            <div class=\"item-name\">Number of Infected:</div>\r\n            <div class=\"item-content\">\r\n              {{ globalResultSearch.TotalConfirmed }}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"col-md-8\">\r\n      <div class=\"box\">\r\n        <div class=\"line-chart\">\r\n          <ngx-charts-line-chart\r\n            [scheme]=\"colorScheme\"\r\n            [legend]=\"legend\"\r\n            [showXAxisLabel]=\"showXAxisLabel\"\r\n            [showYAxisLabel]=\"showYAxisLabel\"\r\n            [xAxis]=\"xAxis\"\r\n            [yAxis]=\"yAxis\"\r\n            [xAxisLabel]=\"xAxisLabel\"\r\n            [yAxisLabel]=\"yAxisLabel\"\r\n            [timeline]=\"timeline\"\r\n            [results]=\"multi\"\r\n            [gradient]=\"gradient\"\r\n            [showGridLines]=\"true\"\r\n            [roundDomains]=\"true\"\r\n          >\r\n          </ngx-charts-line-chart>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n<!---ngif-->\r\n<div class=\"spin\" *ngIf=\"!globalResultSearch && flagSearch && !nullstring\">\r\n  <!---when the globalresult is false and flag false-->\r\n  <div class=\"fluid\">\r\n    <mat-spinner></mat-spinner>\r\n  </div>\r\n</div>\r\n<div class=\"spin\" *ngIf=\"nullstring\">\r\n  <!---when the globalresult is false and flag false-->\r\n  <div class=\"spin2\">\r\n    <div class=\"fluid\">\r\n      <div\r\n        class=\"card\"\r\n      >\r\n        <div class=\"card-body\">\r\n          <h2 class=\"card-text\">\r\n            Please Choose a Country\r\n          </h2>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup, FormBuilder } from '@angular/forms';\r\nimport { Observable } from 'rxjs';\r\nimport { map, startWith } from 'rxjs/operators';\r\nimport { HttpcallsService } from '../httpcalls.service';\r\n\r\n@Component({\r\n  selector: 'app-search',\r\n  templateUrl: './search.component.html',\r\n  styleUrls: ['./search.component.scss'],\r\n})\r\nexport class SearchComponent implements OnInit {\r\n  public countryForm = new FormGroup({\r\n    country: new FormControl(''),\r\n  });\r\n  public view: any[] = [600, 300];\r\n\r\n  /**\r\n   * Options for ngx-charts\r\n   */\r\n  public legend = true;\r\n  public showLabels = true;\r\n  public animations = true;\r\n  public xAxis = true;\r\n  public yAxis = true;\r\n  public showYAxisLabel = false;\r\n  public showXAxisLabel = false;\r\n  public xAxisLabel = 'Number of Days';\r\n  public yAxisLabel = 'Cases';\r\n  public timeline = false;\r\n  public gradient = true;\r\n  public showGridLines = true;\r\n  public roundDomains = true;\r\n  public colorScheme = {\r\n    domain: ['#1f8ef1', '#FF1493', '#00f2c3', '#ec250d'],\r\n  };\r\n  public countryData: any;\r\n  public globalResultSearch;\r\n  public flagSearch: boolean;\r\n  public nullstring: boolean;\r\n  public multi: any;\r\n  public yAxisTickFormattingFn = this.yAxisTickFormatting.bind(this);\r\n  public xAxisTickFormattingFn = this.xAxisTickFormatting.bind(this);\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private httpcallsService: HttpcallsService\r\n  ) {}\r\n  public options: string[] = [];\r\n  filteredOptions: Observable<string[]>;\r\n\r\n  ngOnInit() {\r\n    this.httpcallsService.getCountries().subscribe((res) => {\r\n      const result: any = res;\r\n      for (const i of result) {\r\n        this.options.push(i.Country);\r\n      }\r\n    });\r\n\r\n    this.filteredOptions = this.countryForm.controls.country.valueChanges.pipe(\r\n      startWith(''),\r\n      map((value) => this._filter(value))\r\n    );\r\n  }\r\n\r\n  private _filter(value: string): string[] {\r\n    const filterValue = value.toLowerCase();\r\n    return this.options.filter((option) =>\r\n      option.toLowerCase().includes(filterValue)\r\n    );\r\n  }\r\n  onSubmit(formValues) {\r\n    this.flagSearch = true;\r\n    this.httpcallsService.getbyCountries().subscribe((response) => {\r\n      {\r\n        this.countryData = response;\r\n        if (formValues === '') {\r\n          this.nullstring = true;\r\n        } else {\r\n          for (let i = 0; i < 186; i++) {\r\n            if (this.countryData.Countries[i].Country.includes(formValues)) {\r\n              this.globalResultSearch = this.countryData.Countries[i];\r\n            }\r\n          }\r\n        }\r\n      }\r\n      this.getChartData();\r\n    });\r\n  }\r\n  getChartObjectData(result: any) {\r\n    const totalCasesArray = [];\r\n\r\n    for (const i of result) {\r\n      const temp = {\r\n        name: new Date(i.Date),\r\n        value: i.Confirmed,\r\n      };\r\n      totalCasesArray.push(temp);\r\n    }\r\n    const totalCasesObject = {\r\n      name: 'Confirmed',\r\n      series: totalCasesArray,\r\n    };\r\n    const totalDeathsArray = [];\r\n    for (const i of result) {\r\n      const temp = {\r\n        name: new Date(i.Date),\r\n        value: i.Deaths,\r\n      };\r\n      totalDeathsArray.push(temp);\r\n    }\r\n    const totalDeathsObject = {\r\n      name: 'Death',\r\n      series: totalDeathsArray,\r\n    };\r\n    const totalRecoveredArray = [];\r\n    for (const i of result) {\r\n      const temp = {\r\n        name: new Date(i.Date),\r\n        value: i.Recovered,\r\n      };\r\n      totalRecoveredArray.push(temp);\r\n    }\r\n    const totalRecoveredObject = {\r\n      name: 'Recovery',\r\n      series: totalRecoveredArray,\r\n    };\r\n    const chartInfo = [];\r\n    chartInfo.push(totalCasesObject);\r\n    chartInfo.push(totalDeathsObject);\r\n    chartInfo.push(totalRecoveredObject);\r\n    return chartInfo;\r\n  }\r\n\r\n  getChartData() {\r\n    this.httpcallsService\r\n      .getChartDataByCountries(this.globalResultSearch?.Slug)\r\n      .subscribe((result: any) => {\r\n        this.multi = this.getChartObjectData(result);\r\n      });\r\n  }\r\n\r\n  yAxisTickFormatting(value) {\r\n    return '';\r\n  }\r\n  xAxisTickFormatting(value) {\r\n    return '';\r\n  }\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"]}